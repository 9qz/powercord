/**
 * Powercord, a lightweight @discord client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const sass = require('sass');
const Compiler = require('./compiler');
const { existsSync, statSync } = require('fs');
const { readFile } = require('fs').promises;
const { join, dirname } = require('path');

/**
 * SCSS compiler
 * @extends {Compiler}
 */
class SCSS extends Compiler {
  async listFiles () {
    this.__resolvedImports = {};
    return [
      this.file,
      ...(await this._resolveDeps(this.file))
    ];
  }

  _compile () {
    return new Promise((resolve, reject) => {
      readFile(this.file, 'utf8').then(rawScss => {
        sass.render({
          data: rawScss,
          importer: (url, _, callback) => {
            const imported = this.__resolvedImports[url];
            readFile(imported, 'utf8').then(contents => callback({ contents }));
          }
        }, (err, compiled) => {
          if (err) {
            return reject(err);
          }

          resolve(compiled.css.toString());
        });
      });
    });
  }

  /**
   * Resolve dependencies imported in SCSS files.
   * @param {String} file File to crawl
   * @returns {Promise<String[]>}
   */
  async _resolveDeps (file, resolvedFiles = []) {
    const scss = await readFile(file, 'utf8');
    const basePath = dirname(file);
    const foundFiles = [];
    // Maybe in the future show a deprecation notice for the use of import (?)
    for (const match of scss.matchAll(/@(?:import|use) ['"]([^'"]+)/ig)) {
      const filePath = this._resolveFile(join(basePath, match[1]).replace(/\\/g, '/'));
      if (!filePath) {
        throw new Error(`Unresolved import: failed to locate "${match[1]}"`);
      }
      if (!foundFiles.includes(filePath)) {
        if (this.__resolvedImports[match[1]]) {
          throw new Error(`Colliding names detected: multiple references to "${match[1]}"`);
        }
        this.__resolvedImports[match[1]] = filePath;
        foundFiles.push(filePath);
      }
    }

    for (const foundFile of foundFiles) {
      if (!resolvedFiles.includes(foundFile)) {
        resolvedFiles.push(foundFile);
        await this._resolveDeps(foundFile, resolvedFiles);
      }
    }

    return resolvedFiles;
  }

  /** @private */
  _resolveFile (partialFile) {
    // https://sass-lang.com/documentation/at-rules/use#index-files
    if (existsSync(partialFile) && statSync(partialFile).isDirectory()) {
      partialFile = join(partialFile, '_index.scss');
      if (existsSync(partialFile)) {
        return partialFile;
      }
      return null;
    }

    const extensions = [ 'scss', 'css' ];
    if (!extensions.some(ext => partialFile.endsWith(`.${ext}`))) {
      for (const ext of extensions) {
        const resolved = this._resolveFile0(`${partialFile}.${ext}`);
        if (resolved) {
          return resolved;
        }
      }
    }
    return this._resolveFile0(partialFile);
  }

  /** @private */
  _resolveFile0 (partialFile) {
    if (!existsSync(partialFile)) {
      const f = partialFile.split('/');
      f[f.length - 1] = `_${f[f.length - 1]}`;
      partialFile = f.join('/');
      if (!existsSync(partialFile)) {
        return null;
      }
    }

    if (statSync(partialFile).isDirectory()) {
      return null;
    }
    return partialFile;
  }

  get _metadata () {
    return `${sass.info}; Powercord import resolver v1`;
  }
}

module.exports = SCSS;
