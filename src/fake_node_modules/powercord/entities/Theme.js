/**
 * Powercord, a lightweight @discord client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const ScssCompiler = require('powercord/compilers/scss');
const { createElement } = require('powercord/util');
const { dirname } = require('path');
const { readFile } = require('fs').promises;
const watch = require('node-watch');
const stylus = require('stylus');
const less = require('less');

const Updatable = require('./Updatable');

class Theme extends Updatable {
  constructor (themeID, manifest, isFakeTheme) {
    super(powercord.styleManager.themesDir, themeID);
    this.manifest = manifest;
    this.isTheme = !isFakeTheme;
    this.trackedFiles = [];
    this.applied = false;
    this._theme = this.manifest.effectiveTheme || this.manifest.theme;
  }

  async apply () {
    this.applied = true;
    let element = document.head.querySelector(`#powercord-css-${this.entityID}`);
    if (!element) {
      document.head.appendChild(
        element = createElement('style', { id: `powercord-css-${this.entityID}` })
      );
    }

    const stylesheet = await this._compileStylesheet();

    // Update CSS
    element.innerHTML = stylesheet.data;

    // Filter no longer used watchers
    this.trackedFiles = this.trackedFiles.filter(tf => {
      if (!stylesheet.includes.includes(tf.file)) {
        tf.watcher.close();
        return false;
      }
      stylesheet.includes = stylesheet.includes.filter(i => i !== tf.file);
      return true;
    });

    // Add new watchers
    stylesheet.includes.forEach(file => {
      const watcher = watch(file, this._handleUpdate.bind(this));
      this.trackedFiles.push({
        file,
        watcher
      });
    });
  }

  remove () {
    this.applied = false;
    const element = document.head.querySelector(`#powercord-css-${this.entityID}`);
    if (element) {
      element.remove();
    }
    this.trackedFiles.forEach(tf => tf.watcher.close());
    this.trackedFiles = [];
  }

  async _compileStylesheet () {
    let css = null;
    let files = null;
    let compiler = null;
    switch (this._theme.split('.').pop()) {
      case 'scss':
        compiler = new ScssCompiler(this._theme);
        break;
      case 'less':
        css = await this._renderLess(css);
        break;
      case 'styl':
        css = await this._renderStylus(css);
        break;
      default:
        css = await readFile(this._theme, 'utf8');
        files = [ this._theme ];
    }

    if (compiler) {
      css = await compiler.compile();
      files = await compiler.listFiles();
    }
    return {
      data: css,
      includes: files
    };
  }

  /** @deprecated */
  async _renderLess (rawLess) {
    const results = await less.render(rawLess, {
      paths: [ dirname(this._theme) ]
    });

    return {
      data: results.css,
      includes: [
        this._theme,
        ...results.imports.filter(i => !i.startsWith('http'))
      ]
    };
  }

  /** @deprecated */
  _renderStylus (rawStylus) {
    return new Promise((res, rej) => {
      const renderer = stylus(rawStylus)
        .include(dirname(this._theme));

      renderer.render((err, css) => {
        if (err) {
          return rej(err);
        }

        res({
          data: css,
          includes: [
            this._theme,
            ...renderer.deps()
          ]
        });
      });
    });
  }

  // eslint-disable-next-line no-unused-vars
  _handleUpdate (evt, _) {
    if (evt === 'update') {
      this.apply();
    } else if (evt === 'remove') {
      this.remove();
    }
  }

  static fromFile (themeID, file) {
    return new Theme(themeID, {
      name: themeID,
      version: '1.0.0',
      description: 'No description provided',
      author: 'Unknown',
      license: 'Unknown',
      theme: file,
      overlayTheme: file
    }, true);
  }

  // Update
  async _update (force = false) {
    const shouldApply = this.applied;
    if (shouldApply) {
      // Prevent triggering file watchers while pulling
      this.remove();
    }
    const success = await super._update(force);
    if (success && shouldApply) {
      this.apply();
    }
    return success;
  }
}

module.exports = Theme;
