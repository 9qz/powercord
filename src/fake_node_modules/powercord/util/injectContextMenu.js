// Credit: og impl by Samm-Cheese#9500
// https://discord.com/channels/538759280057122817/755005784999329883/937176673424666744

// Lazily required
let getModule, inject, uninject;
let cachedContextMenuOpener;

/**
 * Injects into a context menu, awaiting for its load if necessary.
 *
 * @param {string} injectionId Injection ID (like for injector.inject)
 * @param {string} displayName Display name of the context menu you want to patch
 * @param {function} fn Function to inject (like for injector.inject)
 * @param {boolean} pre Whether this is a pre-injection or not (like for injector.inject)
 */
async function injectContextMenu (injectionId, displayName, fn, pre = false) {
  if (!getModule) { // Lazy require moment
    /* eslint-disable prefer-destructuring */
    const injector = require('powercord/injector');
    getModule = require('powercord/webpack').getModule;
    inject = injector.inject;
    uninject = injector.uninject;
    /* eslint-enable prefer-destructuring */
  }

  const filter = (m) => m.default?.displayName === displayName;
  const patch = (m) => {
    const og = m.default;
    inject(injectionId, m, 'default', fn, pre);
    Object.assign(m.default, og);
  };

  const mdl = await getModule(filter);
  if (mdl) {
    patch(mdl);
    return;
  }

  if (!cachedContextMenuOpener) {
    cachedContextMenuOpener = await getModule([ 'openContextMenuLazy' ]);
  }

  // Using the same injection id for the actual injection and
  // the await strategy allows for uninject to behave as expected
  // and will not conflict here. we could use a shared await strategy
  // but it's a bit more complex to setup and not really worth
  // the troubles imo
  let patched = false;
  inject(injectionId, cachedContextMenuOpener, 'openContextMenuLazy', (args) => {
    const [ , loader ] = args;
    args[1] = async () => {
      const wrapper = await loader(args[0]);
      return (props) => {
        const res = wrapper(props);
        console.log(displayName, res?.type?.displayName);
        if (!patched && res?.type?.displayName === displayName) {
          patched = true;
          uninject(injectionId);
          patch(getModule(filter, false));

          // Re-render, now with our added patch
          return wrapper(props);
        }

        return res;
      };
    };
    return args;
  }, true);
}

module.exports = injectContextMenu;
